package main

import (
	"bufio"
	"bytes"
	"flag"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"log"
	"os"
	"strings"
	"text/template"
)

// Struct defines the field set array for the struct
type Struct struct {
	Name   string
	Fields []Field
}

// Field defines the Fields pf
type Field struct {
	FieldName string
	FieldType string
}

var (
	fileName   = flag.String("f", "", "The source file path")
	structName = flag.String("t", "", "The name of the struct for which the files has to be generated")
)

func getTemplate() (temp *template.Template, err error) {

	var handler = `
	// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 // Autogenerated by buildergenerator

	package goexoml
	import (
		"errors"
	)
	var _ = errors.New("_")
  {{$name := .Name}}
	{{range $index, $field := .Fields}}
	// Set{{$field.FieldName}} sets {{$field.FieldName}} for {{$name}} struct instance
	func ({{$name | receiver}} *{{$name}}) Set{{$field.FieldName}}({{$field.FieldName | lower}} {{$field.FieldType}}) *{{$name}}{
		{{$name | receiver}}.{{$field.FieldName}} = {{$field.FieldName | lower}}
		return {{$name | receiver}}
	}
	{{end}}

  // Setter returns setter function for the field given
	func ({{$name | receiver}} *{{$name}}) Setter(field string) (setter func(interface{}) (*{{$name}}, error)) {
		{{ if gt (len .Fields) 0 }} switch field { {{range $index, $field := .Fields}}
	case "{{$field.FieldName}}":
		setter = func({{$field.FieldName}}Field interface{}) (*{{$name}}, error) {
			if {{$field.FieldName}}Value, ok := {{$field.FieldName}}Field.({{$field.FieldType}}); ok {
				return {{$name | receiver}}.Set{{$field.FieldName}}({{$field.FieldName}}Value), nil
			}
			return nil, errors.New("Invalid type Expected {{$field.FieldType}}")
		}	{{end}}
		}{{end}}
		return
	}
  // New{{.Name}} return a new {{.Name}} pointer
	func New{{.Name}}() *{{.Name}} {
		return new({{.Name}})
	}
	// I{{.Name}} The interface that satisfies all the methods for this struct
	// I{{.Name}} asserts implementation of setters for all the fields of {{.Name}}
  type I{{.Name}}	interface {
	    {{range $index, $field := .Fields}}Set{{$field.FieldName}}({{$field.FieldName | lower}} {{$field.FieldType}}) *{{$name}};{{end}}
			Setter(string) (func(interface{}) (*{{$name}}, error))
  }
	// Add{{.Name}} appends the verb to response
	func (r *Response) Add{{.Name}}({{.Name|lower}} I{{.Name}}) *Response {
		r.Response = append(r.Response,{{.Name|lower}})
		return r
	}
	`
	// Create a new template and parse the letter into it.
	t := template.
		Must(template.
			New("builder").
			Funcs(template.FuncMap{
				"lower":    strings.ToLower,
				"receiver": func(s string) string { return strings.ToLower(s) + "Receiver" },
			}).
			Parse(handler))
	temp = t
	return
}

func generateCode(t *template.Template, str Struct) (code []byte, err error) {
	var bW bytes.Buffer
	w := bufio.NewWriter(&bW)
	err = t.Execute(w, str)
	if err != nil {
		return
	}
	err = w.Flush()
	if err != nil {
		return
	}
	//format the bytes from bufffer
	code, err = format.Source(bW.Bytes())
	return
}

func generateBuilder(str Struct, outfile *os.File) ([]byte, error) {
	t, err := getTemplate()
	if err != nil {
		return nil, err
	}

	return generateCode(t, str)
}

func structFields(structName string, f *ast.File, src string) (fs []Field) {
	fields := f.Scope.Lookup(structName).Decl.(*ast.TypeSpec).Type.(*ast.StructType).Fields
	for _, field := range fields.List {
		if field.Names[0].String() != "XMLName" {
			fs = append(fs, Field{FieldName: field.Names[0].String(), FieldType: src[field.Type.Pos()-1 : field.Type.End()-1]})
		}
	}
	return
}

func getStructInfo(filename string, structName string) (str Struct, err error) {
	var bf bytes.Buffer
	fset := token.NewFileSet()
	var file *os.File
	file, err = os.Open(filename)
	if err != nil {
		return
	}
	bf.ReadFrom(file)
	b := bf.Bytes()
	var f *ast.File
	f, err = parser.ParseFile(fset, "", b, 0)
	if err != nil {
		return
	}
	str.Name = structName
	str.Fields = structFields(structName, f, string(b))
	return
}

func main() {
	flag.Parse()
	str, err := getStructInfo(*fileName, *structName)
	if err != nil {
		log.Fatal("Error happened creating the resource information", err.Error())
	}

	outfile, err := os.Create(strings.ToLower(str.Name) + "_builder.go")
	if err != nil {
		log.Fatalf("error creating file: %s", err.Error())
	}

	src, err := generateBuilder(str, outfile)
	if err != nil {
		log.Fatalln("Error happened generating the builder ", err.Error())
	}

	if _, err = bytes.NewReader(src).WriteTo(outfile); err != nil {
		log.Fatalf("error writing to file: %s", err.Error())
	}
}
