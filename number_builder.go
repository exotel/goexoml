// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// Autogenerated by buildergenerator

package goexoml

import (
	"errors"
)

var _ = errors.New("_")

//SetSendDigits sets SendDigits for Number struct instance
func (__number__ *Number) SetSendDigits(senddigits string) *Number {
	__number__.SendDigits = senddigits
	return __number__
}

//SetURL sets URL for Number struct instance
func (__number__ *Number) SetURL(url string) *Number {
	__number__.URL = url
	return __number__
}

//SetMethod sets Method for Number struct instance
func (__number__ *Number) SetMethod(method string) *Number {
	__number__.Method = method
	return __number__
}

//SetStatusCallbackEvent sets StatusCallbackEvent for Number struct instance
func (__number__ *Number) SetStatusCallbackEvent(statuscallbackevent string) *Number {
	__number__.StatusCallbackEvent = statuscallbackevent
	return __number__
}

//SetStatusCallback sets StatusCallback for Number struct instance
func (__number__ *Number) SetStatusCallback(statuscallback string) *Number {
	__number__.StatusCallback = statuscallback
	return __number__
}

//SetStatusCallbackMethod sets StatusCallbackMethod for Number struct instance
func (__number__ *Number) SetStatusCallbackMethod(statuscallbackmethod string) *Number {
	__number__.StatusCallbackMethod = statuscallbackmethod
	return __number__
}

//SetNoun sets Noun for Number struct instance
func (__number__ *Number) SetNoun(noun string) *Number {
	__number__.Noun = noun
	return __number__
}

//Setter returns setter function for the field given
func (__number__ *Number) Setter(field string) (setter func(interface{}) (*Number, error)) {
	switch field {
	case "SendDigits":
		setter = func(SendDigitsField interface{}) (*Number, error) {
			if SendDigitsValue, ok := SendDigitsField.(string); ok {
				return __number__.SetSendDigits(SendDigitsValue), nil
			}
			return nil, errors.New("Invalid type Expected string ")
		}
	case "URL":
		setter = func(URLField interface{}) (*Number, error) {
			if URLValue, ok := URLField.(string); ok {
				return __number__.SetURL(URLValue), nil
			}
			return nil, errors.New("Invalid type Expected string ")
		}
	case "Method":
		setter = func(MethodField interface{}) (*Number, error) {
			if MethodValue, ok := MethodField.(string); ok {
				return __number__.SetMethod(MethodValue), nil
			}
			return nil, errors.New("Invalid type Expected string ")
		}
	case "StatusCallbackEvent":
		setter = func(StatusCallbackEventField interface{}) (*Number, error) {
			if StatusCallbackEventValue, ok := StatusCallbackEventField.(string); ok {
				return __number__.SetStatusCallbackEvent(StatusCallbackEventValue), nil
			}
			return nil, errors.New("Invalid type Expected string ")
		}
	case "StatusCallback":
		setter = func(StatusCallbackField interface{}) (*Number, error) {
			if StatusCallbackValue, ok := StatusCallbackField.(string); ok {
				return __number__.SetStatusCallback(StatusCallbackValue), nil
			}
			return nil, errors.New("Invalid type Expected string ")
		}
	case "StatusCallbackMethod":
		setter = func(StatusCallbackMethodField interface{}) (*Number, error) {
			if StatusCallbackMethodValue, ok := StatusCallbackMethodField.(string); ok {
				return __number__.SetStatusCallbackMethod(StatusCallbackMethodValue), nil
			}
			return nil, errors.New("Invalid type Expected string ")
		}
	case "Noun":
		setter = func(NounField interface{}) (*Number, error) {
			if NounValue, ok := NounField.(string); ok {
				return __number__.SetNoun(NounValue), nil
			}
			return nil, errors.New("Invalid type Expected string ")
		}
	}
	return
}

//NewNumber return a new Number pointer
func NewNumber() *Number {
	return new(Number)
}

//INumber The interface that satisfies all the methods for this struct
//INumber asserts implementation of setters for all the fields of Number
type INumber interface {
	SetSendDigits(senddigits string) *Number
	SetURL(url string) *Number
	SetMethod(method string) *Number
	SetStatusCallbackEvent(statuscallbackevent string) *Number
	SetStatusCallback(statuscallback string) *Number
	SetStatusCallbackMethod(statuscallbackmethod string) *Number
	SetNoun(noun string) *Number
	Setter(string) func(interface{}) (*Number, error)
}

//AddNumber appends the verb to response
func (r *Response) AddNumber(number INumber) *Response {
	r.Response = append(r.Response, number)
	return r
}
